import mlipx
import zntrack

from models import MODELS

project = zntrack.Project()



# datapath = [path] so need first element (only element)

{% if datapath %}
with open("{{ datapath[0] }}/../mp_ids.txt", "r") as f:
    mp_ids = [line.strip() for line in f.readlines()]

mp_ids = mp_ids[:2]  # for testing

dict_ref = {}
with project.group("reference", "phonons-ref-to-node"):
    for mp_id in mp_ids:
        phonon = mlipx.PhononRefToNode(
            phonopy_yaml_path=f"{{ datapath[0] }}{mp_id}.yaml",
            name=f"PhononRefToNode_{mp_id}")
        dict_ref[mp_id] = phonon
{% endif %}

fc2_dict = {}
for mp_id, node in dict_ref.items():
    for model_name, model in MODELS.items():
        with project.group(model_name, "phonons-fc2"):
            fc2 = mlipx.PhononForceConstants(
                data=node.force_constants_path, 
                model=model,
                name=f"PhononForceConstants_{mp_id}"
            )
            fc2_dict.setdefault(mp_id, {})[model_name] = fc2


# Alex's yaml files -> phonon dispersions
alex_dir = "alexandria_phonons/alex_data/"
phonon_dict_ref = {}
with project.group("reference", "phonons-dispersion-ref"):
    for mp_id in mp_ids:
        phonon = mlipx.PhononDispersion(
            phonopy_yaml_path=dict_ref[mp_id].force_constants_path,
            thermal_properties_path= dict_ref[mp_id].get_thermal_properties_path,
            name=f"PhononDispersion_{mp_id}")
        phonon_dict_ref[mp_id] = phonon

# # calculated yaml files for models -> phonon dispersions
phonon_dict_pred = {}
for mp_id in fc2_dict:
    ref_phonon = phonon_dict_ref[mp_id]

    for model_name, fc2 in fc2_dict[mp_id].items():
        with project.group(model_name, "phonons-dispersion-pred"):
            phonon = mlipx.PhononDispersion(
                phonopy_yaml_path=fc2.force_constants_path,
                thermal_properties_path=fc2.get_thermal_properties_path,
                qpoints_input_path=ref_phonon.qpoints_path,
                labels_input_path=ref_phonon.labels_path,
                connections_input_path=ref_phonon.connections_path,
                name=f"PhononDispersion_{mp_id}"
            )
            phonon_dict_pred.setdefault(mp_id, {})[model_name] = phonon

project.build()
