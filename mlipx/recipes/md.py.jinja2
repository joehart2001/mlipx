{% if standalone is not defined %}
{% set standalone = true %}
{% endif %}

{% if standalone %}
import mlipx
import zntrack
from models import MODELS

project = zntrack.Project()
{% endif %}

frames = []
{% if md_datapath %}
with project.group("md-initialize"):
    for path in {{ md_datapath }}:
        frames.append(mlipx.LoadDataFile(path=path))
{% endif %}{% if material_ids %}
with project.group("initialize"):
    for material_id in {{ material_ids }}:
        frames.append(mlipx.MPRester(search_kwargs={"material_ids": [material_id]}))
{% endif %}{% if smiles %}
with project.group("initialize"):
    for smiles in {{ smiles }}:
        frames.append(mlipx.Smiles2Conformers(smiles=smiles, num_confs=1))
{% endif %}

{% if md_write_frames_every is not none %}
write_frames_every = {{ md_write_frames_every }}
{% else %}
write_frames_every = 10
{% endif %}



{% if steps %}
steps = {{ steps }}
{% else %}
steps = 1000
{% endif %}

{% if temperature %}
temperature = {{ temperature }}
{% else %}
temperature = 300
{% endif %}

{% if pressure %}
pressure = {{ pressure }}
{% else %}
pressure = 1.0
{% endif %}


{% if resume_trajectory_path %}
resume_trajectory_path = "{{ resume_trajectory_path }}"
print(f"Resuming trajectory from {resume_trajectory_path}")
{% else %}
resume_trajectory_path = None
{% endif %}

{% if ensemble == "NVT" %}
thermostat_barostat_config = mlipx.LangevinConfig(timestep=1, temperature=temperature, friction=0.05)
{% elif ensemble == "NPT" %}
thermostat_barostat_config = mlipx.NPTConfig(timestep=1, temperature=temperature, thermostat_time=20, barostat_time=75.0, bulk_modulus=2, externalstress=0)
{% elif ensemble == "NPT_MTK" %}
thermostat_barostat_config = mlipx.NPT_MTK_Config(
    timestep=1,
    temperature=temperature,
    pressure=pressure,
    tdamp=100.0,
    pdamp=1000.0,
    tchain=3,
    pchain=3,
    tloop=1,
    ploop=1
)
{% else %}
raise ValueError("Invalid ensemble: {{ ensemble }}. Choose NVT or NPT.")
{% endif %}

#force_check = mlipx.MaximumForceObserver(f_max=100)

# Temperature ramp modifier
{% if temp_end is not none %}
temp_end = {{ temp_end }}
t_ramp = mlipx.TemperatureRampModifier(start_temperature=temperature, end_temperature=temp_end, total_steps=steps)
print(f"Running {{ ensemble }} MD for {steps} steps with temperature ramp: {temperature} → {temp_end} K.")
{% else %}
t_ramp = None
print(f"Running {{ ensemble }} MD for {steps} steps at constant temperature: {temperature} K.")
{% endif %}

# Pressure ramp modifier
{% if pressure_end is not none %}
pressure_end = {{ pressure_end }}
p_ramp = mlipx.PressureRampModifier(start_pressure=pressure, end_pressure=pressure_end, total_steps=steps)
print(f"Pressure ramping from {pressure} → {pressure_end} bar over {steps} steps.")
{% else %}
p_ramp = None
{% endif %}

print(f"Number of initial configurations: {len(frames)}.")

MD_dict = {}
MD_list = []

for model_name, model in MODELS.items():
    for idx, data in enumerate(frames):
        with project.group(model_name, "{{ ensemble }}", f"{temperature}K{% if temp_end is not none %}_to_{{ temp_end }}K{% endif %}", f"{steps}steps", f"{idx}"):
            md = mlipx.MolecularDynamics(
                model=model,
                thermostat_barostat_config=thermostat_barostat_config,
                data=data.frames,
                #observers=[force_check],
                modifiers=[m for m in [t_ramp, p_ramp] if m is not None],
                steps=steps,
                print_energy_every=1000,
                write_frames_every=write_frames_every,
                resume_trajectory_path=resume_trajectory_path,
                ensemble="{{ ensemble }}",
            )
            if len(frames) == 1:
                MD_dict[model_name] = md
            else:
                MD_dict[f"{model_name}_{idx}"] = md
            MD_list.append(md)

{% if standalone %}
project.build()
{% endif %}
