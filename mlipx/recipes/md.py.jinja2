{% if standalone is not defined %}
{% set standalone = true %}
{% endif %}

{% if standalone %}
import mlipx
import zntrack
from models import MODELS

project = zntrack.Project()
{% endif %}

frames = []
{% if datapath %}
with project.group("initialize"):
    for path in {{ datapath }}:
        frames.append(mlipx.LoadDataFile(path=path))
{% endif %}{% if material_ids %}
with project.group("initialize"):
    for material_id in {{ material_ids }}:
        frames.append(mlipx.MPRester(search_kwargs={"material_ids": [material_id]}))
{% endif %}{% if smiles %}
with project.group("initialize"):
    for smiles in {{ smiles }}:
        frames.append(mlipx.Smiles2Conformers(smiles=smiles, num_confs=1))
{% endif %}


{% if steps %}
steps = {{ steps }}
{% else %}
steps = 1000
{% endif %}

{% if temperature %}
temperature = {{ temperature }}
{% else %}
temperature = 300
{% endif %}

{% if resume_MD %}
resume_MD = {{ resume_MD }}
print(f"Resuming MD from last step")
{% else %}
resume_MD = False
{% endif %}

{% if resume_trajectory_path %}
resume_trajectory_path = {{ resume_trajectory_path }}
print(f"Resuming trajectory from {resume_trajectory_path}")
{% else %}
resume_trajectory_path = None
{% endif %}

{% if {{ensemble}} == "NVT" %}
thermostat_barostat_config = mlipx.LangevinConfig(timestep=1, temperature=temperature, friction=0.05)
{% elif ensemble == "NPT" %}
thermostat_barostat_config = mlipx.NPTConfig(timestep=1, temperature=temperature, ttime=20, pfactor=2.0, externalstress=0)
{% else %}
raise ValueError("Invalid ensemble: {{ ensemble }}. Choose NVT or NPT.")
{% endif %}

#force_check = mlipx.MaximumForceObserver(f_max=100)
#t_ramp = mlipx.TemperatureRampModifier(end_temperature=400, total_steps=100)


print(f"Running MD for {steps} steps at {temperature} K with {len(frames)} initial configurations.")

MD_dict = {}
MD_list = []

for model_name, model in MODELS.items():
    #for idx, data in enumerate(frames):
    with project.group(model_name, "{{ ensemble }}"):
        md = mlipx.MolecularDynamics(
            model=model,
            thermostat=thermostat,
            data=data.frames,
            #observers=[force_check],
            #modifiers=[t_ramp],
            steps=steps,
            print_energy_every=1000,
            resume_trajectory_path=resume_trajectory_path,
            ensemble="{{ ensemble }}",
        )
        #if len(frames) == 1:
        MD_dict[model_name] = md
        #else:
        #    MD_dict[f"{model_name}_{idx}"] = md
        MD_list.append(md)

{% if standalone %}
project.build()
{% endif %}
