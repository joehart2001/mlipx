import mlipx
import zntrack

from models import MODELS

from mlipx.phonons_utils import download_alex_parallel

project = zntrack.Project()



# datapath = [path] so need first element (only element)
# if datapath: use that dir of yaml files


{% if datapath %}
mp_ids = []
for filename in os.listdir({{ datapath[0] }}):
    match = re.match(r"(mp-\d+)\.yaml$", filename)
    if match:
        mp_ids.append(match.group(1))

{% if n_samples %}
mp_ids = mp_ids[:{{ n_samples }}]
print(f"Using {len(mp_ids)} mp-ids")
{% else %}
print(f"Using {len(mp_ids)} mp-ids")
{% endif %}

dict_ref = {}
with project.group("reference", "phonons-ref-to-node"):
    for mp_id in mp_ids:
        phonon = mlipx.PhononRefToNode(
            phonopy_yaml_path=f"{{ datapath[0] }}{mp_id}.yaml",
            name=f"PhononRefToNode_{mp_id}")
        dict_ref[mp_id] = phonon


{% else %}
download_alex_parallel(sample_every=10, max_threads=16)

with open("alex_phonons/mp_ids_subsampled.txt", "r") as f:
    mp_ids = [line.strip() for line in f.readlines()]


{% if n_samples %}
mp_ids = mp_ids[:{{ n_samples }}]
print(f"Using {len(mp_ids)} mp-ids")
{% else %}
print(f"Using {len(mp_ids)} mp-ids")
{% endif %}


dict_ref = {}
with project.group("reference", "phonons-ref-to-node"):
    for mp_id in mp_ids:
        phonon = mlipx.PhononRefToNode(
            phonopy_yaml_path=f"alex_phonons/alex_phonon_data/{mp_id}.yaml",
            name=f"PhononRefToNode_{mp_id}")
        dict_ref[mp_id] = phonon
{% endif %}

fc2_dict = {}
for mp_id, node in dict_ref.items():
    for model_name, model in MODELS.items():
        with project.group(model_name, "phonons-fc2"):
            fc2 = mlipx.PhononForceConstants(
                data=node.force_constants_path, 
                model=model,
                name=f"PhononForceConstants_{mp_id}"
            )
            fc2_dict.setdefault(mp_id, {})[model_name] = fc2


phonon_dict_ref = {}
phonon_ref_list = []
with project.group("reference", "phonons-dispersion-ref"):
    for mp_id in mp_ids:
        phonon = mlipx.PhononDispersion(
            phonopy_yaml_path=dict_ref[mp_id].force_constants_path,
            thermal_properties_path= dict_ref[mp_id].get_thermal_properties_path,
            name=f"PhononDispersion_{mp_id}")
        phonon_dict_ref[mp_id] = phonon
        phonon_ref_list.append(phonon)


phonon_dict_pred = {}
phonon_pred_list = []
total_dispersion_tasks = sum(len(models) for models in fc2_dict.values())
idx = 1

for mp_id in fc2_dict:
    ref_phonon = phonon_dict_ref[mp_id]

    for model_name, fc2 in fc2_dict[mp_id].items():
        with project.group(model_name, "phonons-dispersion-pred"):
            phonon = mlipx.PhononDispersion(
                phonopy_yaml_path=fc2.force_constants_path,
                thermal_properties_path=fc2.get_thermal_properties_path,
                qpoints_input_path=ref_phonon.qpoints_path,
                labels_input_path=ref_phonon.labels_path,
                connections_input_path=ref_phonon.connections_path,
                node_idx=idx,
                total_no_nodes=total_dispersion_tasks,
                name=f"PhononDispersion_{mp_id}"
            )
            phonon_dict_pred.setdefault(mp_id, {})[model_name] = phonon
            phonon_pred_list.append(phonon)
            idx += 1



elasticity_dict = {}
elasticity_list = []

for model_name, model in MODELS.items():
    with project.group(model_name):
        benchmark = mlipx.Elasticity(
            model =model,
            model_name=model_name,
            n_samples=10,
        )
        elasticity_dict[model_name] = benchmark
        elasticity_list.append(benchmark)



with project.group('bulk-crystal-benchmark'):
    bulk_crystal_benchmark = mlipx.BulkCrystalBenchmark(
        phonon_ref_list=phonon_ref_list,
        phonon_pred_list=phonon_pred_list,
        elasticity_list=elasticity_list,
    )



project.build()
