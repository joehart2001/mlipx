{% if standalone is not defined %}
{% set standalone = true %}
{% endif %}

{% if standalone %}
import mlipx
import zntrack
import json
from models import MODELS
from mlipx.benchmark_download_utils import get_benchmark_data

project = zntrack.Project()
{% endif %}


lat_const_dir = get_benchmark_data("lattice_constants.zip", force=True) / "lattice_constants"



ref_path_const_exp = lat_const_dir / 'lattice_constants_ref_exp.json'
ref_path_const_dft = lat_const_dir / 'lattice_constants_ref.json'
ref_path_type = lat_const_dir / 'lattice_constants_ref_types.json'

with project.group("ref", "lattice-constant"):
    ref_lat_const_node_exp = mlipx.RefToNode(
        ref_path=str(ref_path_const_exp),
        name="LatticeConst-ref-exp")
with project.group("ref", "lattice-constant"):
    ref_lat_const_node_dft = mlipx.RefToNode(
        ref_path=str(ref_path_const_dft),
        name="LatticeConst-ref-dft")
    ref_lat_type_node = mlipx.RefToNode(
        ref_path=str(ref_path_type),
        name="Lattice-ref-types")


ref_node_dict = {}
ref_node_dict['exp'] = ref_lat_const_node_exp
ref_node_dict['dft'] = ref_lat_const_node_dft
    
with open(ref_path_const_exp) as f:
    ref_lat_const = json.load(f)
with open(ref_path_type) as f:
    ref_lat_type = json.load(f)

crystal_dict = {}
for solid, lattice_type in ref_lat_type.items():
    name = solid
    with project.group("build-crystals"):
            crystal = mlipx.BuildASEcrystal(
                element=solid,
                lattice_type=lattice_type,
                a = ref_lat_const['SiC(a)'] if solid == 'SiC' else ref_lat_const[solid],
                c = ref_lat_const['SiC(c)'] if solid == 'SiC' else None,
                name=f"BuildASEcrystal-{name}-{lattice_type}"
            )
            crystal_dict[solid] = crystal



optim_dict = {}
for formula, crystal in crystal_dict.items():
    for model_name, model in MODELS.items():
        with project.group(model_name, 'structure-optimization'):
            struct_optim = mlipx.StructureOptimization(
                data=crystal.frames, 
                data_id=-1, 
                optimizer="LBFGS", 
                model=model,
                fmax=0.03,
                filter="FrechetCellFilter",
                name=f"StructureOptimization-{formula}"
            )
            
            optim_dict.setdefault(formula, {})[model_name] = struct_optim
            


lattice_const_dict = {}
lattice_const_list = []

for formula in optim_dict.keys():
    
    for model_name, model in MODELS.items():
        with project.group(model_name, 'lattice-constant-pred'):
            lat_const = mlipx.LatticeConstant(
                structure=optim_dict[formula][model_name].frames,
                name=f"LatticeConst-{formula}"
            )
            lattice_const_dict.setdefault(formula, {})[model_name] = lat_const
            lattice_const_list.append(lat_const)


{% if standalone %}
project.build()
{% endif %}