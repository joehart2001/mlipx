import mlipx
import zntrack

from models import MODELS

from mlipx.phonons_utils import download_alex_parallel
from mlipx.benchmark_download_utils import BENCHMARK_DATA_DIR
from pathlib import Path


{% if standalone is not defined %}
{% set standalone = true %}
{% endif %}

{% if standalone %}
project = zntrack.Project()
{% endif %}



download_alex_parallel(sample_every=1, max_threads=16)
local_path = Path(BENCHMARK_DATA_DIR) / "alex_phonons/alex_phonon_data"

with open(f"{local_path}/../mp_ids_subsampled.txt", "r") as f:
    mp_ids = [line.strip() for line in f.readlines()]

{% if small %}
md_ids = mp_ids[:10]
{% elif medium %}
md_ids = mp_ids[:100]

{% elif n_phonons and n_phonons_start %}
mp_ids = mp_ids[{{ n_phonons_start }}:{{ n_phonons }}]

{% elif n_phonons %}
mp_ids = mp_ids[:{{ n_phonons }}]

{% elif n_phonons %}
mp_ids = mp_ids[{{ n_phonons_start }}:]

{% endif %}
print(f"Using {len(mp_ids)} mp-ids")



{% if n_jobs %}
n_jobs = {{ n_jobs }}
if n_jobs == 1:
    print("No parallelisation, running in serial")
else:
    print(f"Parallelisation over {n_jobs} jobs")

{% else %}
n_jobs = -1
print(f"Parallelisation over {n_jobs} jobs")
{% endif %}


{% if check_completed %}
check_completed = {{ check_completed }}
{% else %}
check_completed = False
{% endif %}

with project.group("phonons-dispersion-ref"):
    phonon_ref_node = mlipx.PhononAllRef(
            mp_ids=mp_ids,
            phonopy_yaml_dir=str(local_path),
    )


{% if threading == True %}
threading = True
{% else %}
threading = False
{% endif %}


with project.group("phonons-dispersion-ref"):
    phonon_ref_node = mlipx.PhononAllRef(
            mp_ids=mp_ids,
            phonopy_yaml_dir=str(local_path),
    )


{% if generate_displacements == True %}

phonon_dict = {}
phonon_pred_list = []
for model_name, model in MODELS.items():
    with project.group(model_name, "phonons-dispersion-pred"):
        phonon = mlipx.PhononAllBatchMeta(
                mp_ids=mp_ids,
                model=model,
                phonopy_yaml_dir=str(local_path),
                n_jobs=n_jobs,
                check_completed=check_completed,
                multiprocessing = multiprocessing
        )
        phonon_dict[model_name] = phonon
        phonon_pred_list.append(phonon)

{% else %}

phonon_dict = {}
phonon_pred_list = []
for model_name, model in MODELS.items():
    with project.group(model_name, "phonons-dispersion-pred"):
        phonon = mlipx.PhononAllBatch(
                mp_ids=mp_ids,
                model=model,
                phonopy_yaml_dir=str(local_path),
                n_jobs=n_jobs,
                check_completed=check_completed,
        )
        phonon_dict[model_name] = phonon
        phonon_pred_list.append(phonon)

{% endif %}

{% if standalone %}
project.build()
{% endif %}