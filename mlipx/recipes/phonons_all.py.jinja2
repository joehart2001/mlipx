import mlipx
import zntrack

from models import MODELS

from mlipx.phonons_utils import download_alex_parallel
from mlipx.benchmark_download_utils import BENCHMARK_DATA_DIR
from pathlib import Path


{% if standalone is not defined %}
{% set standalone = true %}
{% endif %}

{% if standalone %}
project = zntrack.Project()
{% endif %}



download_alex_parallel(sample_every=1, max_threads=16)
local_path = Path(BENCHMARK_DATA_DIR) / "alex_phonons/alex_phonon_data"

with open(f"{local_path}/../mp_ids_subsampled.txt", "r") as f:
    mp_ids = [line.strip() for line in f.readlines()]

{% if n_materials %}
mp_ids = mp_ids[:{{ n_materials }}]
{% endif %}
print(f"Using {len(mp_ids)} mp-ids")



# with project.group("phonons-dispersion-ref"):
#     phonon_ref_node = mlipx.PhononAllRef(
#             mp_ids=mp_ids,
#             phonopy_yaml_dir=str(local_path),
#     )
    

phonon_dict = {}
phonon_list = []
for model_name, model in MODELS.items():
    with project.group(model_name, "phonons-dispersion-pred"):
        phonon = mlipx.PhononAllBatch(
                mp_ids=mp_ids,
                model=model,
                phonopy_yaml_dir=str(local_path),
        )
        phonon_dict[model_name] = phonon
        phonon_list.append(phonon)


{% if standalone %}
project.build()
{% endif %}